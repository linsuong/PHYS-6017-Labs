################################################################################################
elif investigation_number == '2':
    print("topic 2")
    #for the case of F >> mg, finding when SHM no longer persists (with 0 damping force)
    #mg is 9.81, so 
    fig_forcing, ax_forcing = plt.subplots(5, 2, figsize=(15, 17))
    F_start = 100
    F_end = 20
    F_range = np.linspace(F_end, F_start, 5)
    F_range = np.flip(F_range)

    for p in range(0, 5):
        t_values, theta_values = pendulum_solver(m, L, 0, g, F_range[p], eta, interval, np.pi, 0)
        ax_forcing[p, 0].plot(t_values, theta_values[:, 0], label = f'$F$ = {F_range[p]:.1f} N')
        ax_forcing[p, 1].plot(t_values, theta_values[:, 0] % (2 * np.pi), label = f'$F$ = {F_range[p]:.1f} N')
        #set_pi_ticks(ax_forcing[p, 0], data = theta_values)
        set_pi_ticks(ax_forcing[p, 1], data = theta_values % (2 * np.pi))
        ax_forcing[p, 0].legend(loc = 'upper left')
        ax_forcing[p, 1].legend(loc = 'upper right')
        ax_forcing[p, 0].set_xlabel("time $t$")
        ax_forcing[p, 0].set_ylabel("$\\theta$")
        ax_forcing[p, 1].set_xlabel("time $t$")
        ax_forcing[p, 1].set_ylabel("$\\theta$")
        
        ax_forcing[p, 0].set_xlim(interval)
        ax_forcing[p, 1].set_xlim(interval)
        
    plt.suptitle("F >> mg, with 0 damping coefficient k. (Right: Normalised by 2$\\pi$)")

    plt.savefig(os.path.join(save_loc, f'F greater than mg, with 0 damping coeff k, F from {F_start} to {F_end}.png'))

    fig_forcing_phase, ax_forcing_phase = plt.subplots(3, 2, figsize=(15, 17))

    for p in range(0, 3):
        
        t_values, theta_values = pendulum_solver(m, L, 0, g, F_range[p], eta, interval, np.pi, 0)
        ax_forcing_phase[p, 0].plot(theta_values[:, 0], theta_values[:, 1], marker='>', markevery=50, label = f'$k$ = {F_range[p]:.1f}')
        ax_forcing_phase[p, 0].legend(loc = 'upper left')
        ax_forcing_phase[p, 0].set_xlabel('Angle $\\theta$ (rad)')
        ax_forcing_phase[p, 0].set_ylabel('Angular Velocity, $\\frac{d\\theta}{dt}$ ($rad s^{-1}$)')
        
    for p in range(0, 2):
        t_values, theta_values = pendulum_solver(m, L, 0, g, F_range[p + 3], eta, interval, np.pi, 0)
        ax_forcing_phase[p, 1].plot(theta_values[:, 0], theta_values[:, 1], marker='>', markevery=50, label = f'$k$ = {F_range[p + 3]:.1f}')
        ax_forcing_phase[p, 1].legend(loc = 'upper left')
        ax_forcing_phase[p, 1].set_xlabel('Angle $\\theta$ (rad)')
        ax_forcing_phase[p, 1].set_ylabel('Angular Velocity, $\\frac{d\\theta}{dt}$ ($rad s^{-1}$)')
        
    ax_forcing_phase[2, 1].axis("off")
    
    plt.savefig(os.path.join(save_loc, f"Phase Plot: F greater than mg, with 0 damping coefficient k, F from {F_start} to {F_end}.png"))
    
    plt.show()
        
    print("plot done")

    plt.show()

if investigation_number == '2.1':
    F = 0.35
    
    fig_forcing_compare, ax_forcing_compare = plt.subplots(3, 1, figsize = (6, 15))
    t_values, theta_values = pendulum_solver(m, L, 0, g, F, eta, interval, np.pi, 0)
    
    ax_forcing_compare[0].plot(t_values, theta_values[:, 0], label = f'$k$ = {k}')
    ax_forcing_compare[0].legend(loc = 'upper right')
    ax_forcing_compare[0].set_xlabel("time $t$")
    ax_forcing_compare[0].set_ylabel("$\\theta$")
    
    ax_forcing_compare[1].plot(t_values, theta_values[:, 0] % (2 * np.pi), label = f'$k$ = {k}')
    ax_forcing_compare[1].legend(loc = 'upper right')
    ax_forcing_compare[1].set_xlabel("time $t$")
    ax_forcing_compare[1].set_ylabel("$\\theta$")
    
    ax_forcing_compare[2].plot(theta_values[:, 0], theta_values[:, 1], marker='>', markevery=50, label = f'$k$ = {k}')
    ax_forcing_compare[2].legend(loc = 'upper left')
    ax_forcing_compare[2].set_xlabel('Angle $\\theta$ (rad)')
    ax_forcing_compare[2].set_ylabel('Angular Velocity, $\\frac{d\\theta}{dt}$ ($rad s^{-1}$)')
    
    fig_forcing_compare.suptitle(f'F >> mg, F = {F}')
    
    plt.savefig(os.path.join(save_loc, f"Plot of F>>mg, F is {F}.png"))
    plt.show()
    
elif investigation_number == '3':
    #for the case of 0 damping, F/mg and eta are small (beat freq))
    #F/mg small implies mg is big or F is small, and take eta as very small.
    #take F as 1
    m_start = 20
    m_end = 10
    
    m_range = np.linspace(m_start, m_end, 4)
    
    fig_general_forcing, ax_general_forcing = plt.subplots(4, 2, figsize=(15, 15))
    
    for p in range(0, 4):
        t_values, theta_values = pendulum_solver(m_range[p], L, 0, g, 1, eta, interval, np.pi, 0)
        ax_general_forcing[p, 0].plot(t_values, theta_values[:, 0], label = f'$F/mg$ = {F/(m_range[p] * g)}')
        ax_general_forcing[p, 1].plot(t_values, theta_values[:, 0] % (2 * np.pi), label = f'$F/mg$ = {F/(m_range[p] * g)}')
        #set_pi_ticks(ax_general_forcing[p, 0], data = theta_values)
        set_pi_ticks(ax_general_forcing[p, 1], data = theta_values % (2 * np.pi))
        ax_general_forcing[p, 0].legend(loc = 'upper left')
        ax_general_forcing[p, 1].legend(loc = 'upper right')
        ax_general_forcing[p, 0].set_xlabel("time $t$")
        ax_general_forcing[p, 0].set_ylabel("$\\theta$")
        ax_general_forcing[p, 1].set_xlabel("time $t$")
        ax_general_forcing[p, 1].set_ylabel("$\\theta$")
        
        ax_general_forcing[p, 0].set_xlim(interval)
        ax_general_forcing[p, 1].set_xlim(interval)
        
    plt.suptitle(f"General damping, $\\eta$ = {eta}")

    plt.savefig(os.path.join(save_loc, f'Plot of Fmg, m from {m_start} to {m_end}.png'))

    fig_general_forcing_phase, ax_general_forcing_phase = plt.subplots(2, 2, figsize=(15, 17))

    for p in range(0, 2):
        t_values, theta_values = pendulum_solver(m_range[p], L, 0, g, 1, eta, interval, np.pi, 0)
        ax_general_forcing_phase[p, 0].plot(theta_values[:, 0], theta_values[:, 1], marker='>', markevery=50, label = f'$F/mg$ = {F/(m_range[p] * g)}')
        ax_general_forcing_phase[p, 0].legend(loc = 'upper left')
        ax_general_forcing_phase[p, 0].set_xlabel('Angle $\\theta$ (rad)')
        ax_general_forcing_phase[p, 0].set_ylabel('Angular Velocity, $\\frac{d\\theta}{dt}$ ($rad s^{-1}$)')
        
    for p in range(0, 2):
        t_values, theta_values = pendulum_solver(m_range[p + 2], L, 0, g, 1, eta, interval, np.pi, 0)
        ax_general_forcing_phase[p, 1].plot(theta_values[:, 0], theta_values[:, 1], marker='>', markevery=50, label = f'$F/mg$ = {F/(m_range[p + 2] * g)}')
        ax_general_forcing_phase[p, 1].legend(loc = 'upper left')
        ax_general_forcing_phase[p, 1].set_xlabel('Angle $\\theta$ (rad)')
        ax_general_forcing_phase[p, 1].set_ylabel('Angular Velocity, $\\frac{d\\theta}{dt}$ ($rad s^{-1}$)')
        
    plt.suptitle(f"Phase Plot: General damping, $\\eta$ = {eta}")
    plt.savefig(os.path.join(save_loc, f"Phase Plot of Plot of Fmg, m from {m_start} to {m_end}.png"))
    
    plt.show()
        
    print("plot done")

    plt.show()

elif investigation_number == '3.1':
    eta = 1e-08
    F = 1e-8
    m = 1e8
    
    t_values, theta_values = pendulum_solver(m, L, F, g, F, eta, interval, np.pi, 0)
    
    fig_general_forcing_compare, ax_general_forcing_compare = plt.subplots(3, 1, figsize = (6, 15))
    t_values, theta_values = pendulum_solver(m, L, 0, g, F, eta, interval, np.pi, 0)
    
    ax_general_forcing_compare[0].plot(t_values, theta_values[:, 0], label = f'$k$ = {k}')
    ax_general_forcing_compare[0].legend(loc = 'upper right')
    ax_general_forcing_compare[0].set_xlabel("time $t$")
    ax_general_forcing_compare[0].set_ylabel("$\\theta$")
    
    ax_general_forcing_compare[1].plot(t_values, theta_values[:, 0] % (2 * np.pi), label = f'$k$ = {k}')
    ax_general_forcing_compare[1].legend(loc = 'upper right')
    ax_general_forcing_compare[1].set_xlabel("time $t$")
    ax_general_forcing_compare[1].set_ylabel("$\\theta$")
    
    ax_general_forcing_compare[2].plot(theta_values[:, 0], theta_values[:, 1], marker='>', markevery=50, label = f'$k$ = {k}')
    ax_general_forcing_compare[2].legend(loc = 'upper left')
    ax_general_forcing_compare[2].set_xlabel('Angle $\\theta$ (rad)')
    ax_general_forcing_compare[2].set_ylabel('Angular Velocity, $\\frac{d\\theta}{dt}$ ($rad s^{-1}$)')
    
    fig_general_forcing_compare.suptitle(f'General damping, F/mg = {F/(m * g)}, $\\eta$ = {eta}')
    
    plt.savefig(os.path.join(save_loc, f"Plot of Fmg, m is {m}.png"))
    plt.show()
    

else:
    print("Invalid selection. Please choose a number between 1 and 3.")
    